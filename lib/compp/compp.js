// Generated by CoffeeScript 1.9.2
module.exports = {
  run: function() {
    var analyzeLines, comppGetOpt, defStr, defineStr, defines, fs, hasFoundEqualsSign, i, j, k, l, len, len1, opts, path, processedOpts, processedStream, ref, ref1, ref2, ref3, undefStr;
    process.argv.shift();
    process.argv[0] = "coffee";
    fs = require('fs');
    path = require('path');
    comppGetOpt = require(__dirname + "/compp-getopt");
    analyzeLines = require(__dirname + "/analyze-lines");
    opts = comppGetOpt.parseArgsFromArr(process.argv);
    if (opts.help) {
      comppGetOpt.displayHelp();
      process.exit(-1);
    }
    if (opts.version) {
      comppGetOpt.displayVersion();
      process.exit(0);
    }
    if (!((0 < (ref = opts.argv.length) && ref <= 2))) {
      console.error("Please input at least one file for preprocessing.");
      process.exit(-1);
    }
    if (opts.output.length > 1 || (opts.output.length === 1 && opts.argv.length === 2)) {
      console.error("Please input at most one file for output.");
      process.exit(-1);
    }
    if (opts.output.length === 0 && opts.argv.length === 2) {
      opts.output = [opts.argv[1]];
    }
    defines = {};
    ref1 = opts.defines;
    for (j = 0, len = ref1.length; j < len; j++) {
      defStr = ref1[j];
      hasFoundEqualsSign = false;
      for (i = k = 0, ref2 = defStr.length - 1; k <= ref2; i = k += 1) {
        if (defStr.charAt(i) === "=") {
          defines[defStr.substr(0, i)] = {
            text: defStr.substr(i + 1),
            type: "object"
          };
          hasFoundEqualsSign = true;
          break;
        }
      }
      if (!hasFoundEqualsSign) {
        defines[defStr] = {
          text: "",
          type: "object"
        };
      }
    }
    if (opts.defines && opts.undefs) {
      ref3 = opts.undefs;
      for (l = 0, len1 = ref3.length; l < len1; l++) {
        undefStr = ref3[l];
        for (defineStr in defines) {
          if (undefStr === defineStr) {
            delete defines[defineStr];
          }
        }
      }
    }
    processedOpts = {
      defines: defines,
      includes: opts.includes
    };
    processedStream = analyzeLines(opts.argv[0], fs.createReadStream(opts.argv[0]), processedOpts);
    if (opts.output[0]) {
      return fs.stat(path.dirname(opts.output[0]), function(err, stats) {
        if (err && err.code === 'ENOENT') {
          console.error("Directory for output file not found.");
          process.exit(-1);
        } else if (err) {
          throw err;
        }
        return fs.stat(opts.output[0], function(err, stats) {
          var outStream;
          if (err && err.code !== 'ENOENT') {
            throw err;
          }
          if (!err && stats.isDirectory()) {
            console.error("Output file should be file, not directory.");
            return process.exit(-1);
          } else {
            outStream = fs.createWriteStream(opts.output[0]);
            processedStream.pipe(outStream);
            return outStream.on('error', function(err) {
              console.error("Error in writing to output file: " + ("" + opts.output[0]));
              throw err;
            });
          }
        });
      });
    } else {
      return processedStream.pipe(process.stdout);
    }
  }
};

// Generated by CoffeeScript 1.9.2
var TestTransform, Transform,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Transform = require('stream').Transform;

module.exports = TestTransform = (function(superClass) {
  extend(TestTransform, superClass);

  function TestTransform() {
    Transform.call(this, {
      readableObjectMode: true
    });
    this.buffer = "";
  }

  TestTransform.prototype.pushLines = function() {
    var newlineIndex, results;
    newlineIndex = this.buffer.indexOf("\n");
    results = [];
    while (newlineIndex !== -1) {
      this.push(this.buffer.substr(0, newlineIndex + 1));
      this.emit('line', this.buffer.substr(0, newlineIndex + 1));
      this.buffer = this.buffer.substr(newlineIndex + 1);
      results.push(newlineIndex = this.buffer.indexOf("\n"));
    }
    return results;
  };

  TestTransform.prototype._transform = function(chunk, enc, cb) {
    this.buffer = this.buffer + chunk.toString();
    this.pushLines();
    return typeof cb === "function" ? cb() : void 0;
  };

  TestTransform.prototype._flush = function(cb) {
    this.pushLines();
    this.buffer += "\n";
    this.push(this.buffer);
    this.emit('line', this.buffer);
    this.buffer = "";
    return typeof cb === "function" ? cb() : void 0;
  };

  return TestTransform;

})(Transform);

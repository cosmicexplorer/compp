// Generated by CoffeeScript 1.9.2
var ConcatBackslashNewlinesStream, Transform,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Transform = require('stream').Transform;

module.exports = ConcatBackslashNewlinesStream = (function(superClass) {
  extend(ConcatBackslashNewlinesStream, superClass);

  function ConcatBackslashNewlinesStream() {
    var cbEnd, cbError;
    if (!this instanceof ConcatBackslashNewlinesStream) {
      return new ConcatBackslashNewlinesStream;
    } else {
      Transform.call(this, {
        readableObjectMode: true
      });
      this.heldLines = [];
      this.prevChar = "";
    }
    cbEnd = (function(_this) {
      return function() {
        return _this.emit('end');
      };
    })(this);
    cbError = (function(_this) {
      return function(err) {
        return _this.emit('error');
      };
    })(this);
    this.on('pipe', (function(_this) {
      return function(src) {
        src.on('end', cbEnd);
        return src.on('error', cbError);
      };
    })(this));
    this.on('unpipe', (function(_this) {
      return function(src) {
        src.removeListener('end', cbEnd);
        return src.removeListener('error', cbError);
      };
    })(this));
  }

  ConcatBackslashNewlinesStream.prototype.baseTransformFunc = function(str) {
    var c, i, len, results;
    results = [];
    for (i = 0, len = str.length; i < len; i++) {
      c = str[i];
      this.heldLines.push(c);
      if (c === "\n" && this.prevChar !== "\\") {
        this.emit('line', this.heldLines.join(""));
        this.push(this.heldLines.join(""));
        this.heldLines = [];
      }
      results.push(this.prevChar = c);
    }
    return results;
  };

  ConcatBackslashNewlinesStream.prototype._transform = function(chunk, enc, cb) {
    var str;
    str = chunk.toString();
    this.baseTransformFunc(str);
    return typeof cb === "function" ? cb() : void 0;
  };

  ConcatBackslashNewlinesStream.prototype._flush = function(cb) {
    var finalStr;
    finalStr = this.heldLines.join("");
    if (finalStr.charAt(finalStr.length - 1) !== "\n") {
      finalStr += "\n";
    }
    this.emit('line', finalStr);
    this.push(finalStr);
    return typeof cb === "function" ? cb() : void 0;
  };

  return ConcatBackslashNewlinesStream;

})(Transform);
